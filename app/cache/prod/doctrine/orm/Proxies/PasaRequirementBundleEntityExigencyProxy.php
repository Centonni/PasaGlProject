<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PasaRequirementBundleEntityExigencyProxy extends \Pasa\RequirementBundle\Entity\Exigency implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setFunctionality($functionality)
    {
        $this->__load();
        return parent::setFunctionality($functionality);
    }

    public function getFunctionality()
    {
        $this->__load();
        return parent::getFunctionality();
    }

    public function setNumber($number)
    {
        $this->__load();
        return parent::setNumber($number);
    }

    public function getNumber()
    {
        $this->__load();
        return parent::getNumber();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setPriority($priority)
    {
        $this->__load();
        return parent::setPriority($priority);
    }

    public function getPriority()
    {
        $this->__load();
        return parent::getPriority();
    }

    public function setCharge($charge)
    {
        $this->__load();
        return parent::setCharge($charge);
    }

    public function getCharge()
    {
        $this->__load();
        return parent::getCharge();
    }

    public function setStartDate($startDate)
    {
        $this->__load();
        return parent::setStartDate($startDate);
    }

    public function getStartDate()
    {
        $this->__load();
        return parent::getStartDate();
    }

    public function setEndDate($endDate)
    {
        $this->__load();
        return parent::setEndDate($endDate);
    }

    public function getEndDate()
    {
        $this->__load();
        return parent::getEndDate();
    }

    public function setProject(\Pasa\RequirementBundle\Entity\Project $project)
    {
        $this->__load();
        return parent::setProject($project);
    }

    public function getProject()
    {
        $this->__load();
        return parent::getProject();
    }

    public function addProgression(\Pasa\RequirementBundle\Entity\Progression $progression)
    {
        $this->__load();
        return parent::addProgression($progression);
    }

    public function getProgressions()
    {
        $this->__load();
        return parent::getProgressions();
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'progressions', 'project', 'id', 'functionality', 'number', 'description', 'priority', 'charge', 'start_date', 'end_date');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}